#include <stdio.h>
#include <malloc.h>

main()
{
	int *p;
	//int p[3]; //원래는 이렇게 자동할당으로 배열을 만들어 주어야 하는데 만들어주지 
	// 않고 동적할당으로 heap영역에 만들게 됨
	int i;

	p = (int *) malloc(3*sizeof(int));//12byte를 할당해서 저장 장소 3개를 만드는 행위
	//동적할당은 사용하는 이유는 배열에서 공간을 예상해서 선언해주는데 그 공간이 정해지지 않을때
	//그리고 오버플로우를 방지하기 위해서
	//int p[n]; 배열의 크기는 변수로 못함 그래서 sizeof앞에 수를 변수로 처리하면 오버플로우 없이 
	//저장공간을 그때그때 할당할수 있다.
	p[0] = 13;
	p[1] = 72;
	p[2] = 81;
	for(i = 0; i < 3; i++)
	{
		printf("p[%d] = %d \n",i,p[i]);
	}



	/*

	p = (int *)malloc(sizeof(int));//malloc(4); //(int *) 을 타입캐스팅이라고 함 기본적으로 malloc()함수는 void type를 리턴함 
	//heap영역의 운영체제가 사용하지 않는 무작위 장소를 4byte의 공간에 malloc()가 주소값을 가지고옴

	*p = 25;

	printf("%d\n",*p);
	*/
}

/*
	동적할당 Dynamic allocation 
	: 프로그래머의 지시에 의해서 "생겨라" 라고 하면 기억장소가 생기고
	" 없어져라"라고 하면 기엉장속가 없어지는 방식으로 할당되는 방식

	heap영역에서 할당됨(원래 주인은 OS)

	malloc(int) 함수
	free() 함수

	특징: 동적할당된 기억장소는 변수명을 지을 수가 없기 떄문에 포인터의 사용이 
	필수적임
	반드시 기억해야 하는것은
	포인터의 사용목적
	(3) 동적 할당
	(4) 관계를 나타내는 정보처리(자료구조)

	주의 사항
	garbage 포인터 위치 값을 잃어 나와 모든 프로그램이 사용못하는 기억장소가 생김
	시스템의 영향을 줌 free()를 안하면 문제가 발생함
	dangling reference 허상참조 free()를 해서 저장장소를 돌려줬는데 포인터롤 가르키면
	오류가 발생한다.
	garbage collection = garbage가 안생기도록하는 조치(free())

*/
